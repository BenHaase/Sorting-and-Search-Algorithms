Script started on Sun Sep 27 17:27:11 2015
admiral% cat bjh1b.cpp
// Ben Haase
// 9/27/15
// CS3130 part B 
// results of search algorithms on array of 100 random ints
// running time of search algorithms on array of random sorted integers

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <time.h>

using namespace std;

int linearSearch(int *, int, int);
int binarySearch(int *, int, int);
void run100();
void avgRunTimes();
int * randomArrGen(int);
void viewArray(int *, int);
void cocktailSortSwCt(int *, int);
int main(int argc, char * argv[])
{
        srand(time(NULL));
        run100();
        avgRunTimes();

        return 0;
}

//Linear Search function
int linearSearch(int * a, int s, int key){
        for (int i = 0; i < s; i++){
                if (a[i] == key) return i;
        }
        return -1;
}

//Binary Search function
int binarySearch(int * a, int s, int key){
        int min = 0;
        int max = s - 1;
        int mid;
        while (min <= max){
                mid = (min + max) / 2;
                if (a[mid] == key) return mid;
                else if (a[mid] < key) min = mid + 1;
                else max = mid - 1;
        }
        return -1;
}

//function to run search algorithms for a sorted array of 100 random ints
void run100(){
        int s = 100;
        int * a = randomArrGen(s);
        cocktailSortSwCt(a, s);
        int key = rand() % s;
        int lin;
        int bin;
        viewArray(a, s);
        cout << endl << "Search Value: " << a[key] << endl;
        lin = linearSearch(a, s, a[key]);
        bin = binarySearch(a, s, a[key]);
        cout << "Linear Search: " << lin << " (" << a[lin] << ")" << endl;
        cout << "Binary Search: " << bin << " (" << a[bin] << ")" << endl << endl;
        delete[] a;

        return;
}

//Function to determine the average run times for search algorithms
void avgRunTimes(){
        clock_t start;
        clock_t end;
        double elapsed;
        int s[] = { 500, 1000, 2500, 5000 };
        int ** a[4];
        double * at[2];
        int key[4][10];
        for (int i = 0; i < 4; i++){
                a[i] = new int *[10];
                if (i < 2){
                        at[i] = new double[4];
                        for (int k = 0; k < 4; k++) at[i][k] = 0;
                }
                for (int j = 0; j < 10; j++){
                        a[i][j] = randomArrGen(s[i]);
                        cocktailSortSwCt(a[i][j], s[i]);
                        key[i][j] = rand() % s[i];
                }
        }

        for (int j = 0; j < 4; j++){
                for (int k = 0; k < 10; k++){
                        start = clock();
                        for (int x = 0; x < 50000; x++)linearSearch(a[j][k], s[j], a[j][k][key[j][k]]);
                        end = clock();
                        elapsed = double(end - start) / CLOCKS_PER_SEC;
                        at[0][j] = at[0][j] + elapsed;
                        start = clock();
                        for (int x = 0; x < 50000; x++)binarySearch(a[j][k], s[j], a[j][k][key[j][k]]);
                        end = clock();
                        elapsed = double(end - start) / CLOCKS_PER_SEC;
                        at[1][j] = at[1][j] + elapsed;
                }
                at[0][j] = (at[0][j] / 10) / 50000;
                at[1][j] = (at[1][j] / 10) / 50000;
        }

        for (int i = 0; i < 2; i++){
                if (i == 0) cout << "Linear Search:" << endl;
                if (i == 1) cout << endl << "Binary Search:" << endl;
                for (int j = 0; j < 4; j++){
                        cout << s[j] << ": ";
                        if (s[j] == 500) cout << " ";
                        cout << at[i][j] << endl;
                }
        }

        return;
}

//function to generate an array of random ints
int * randomArrGen(int s){
        int * a = new int[s];
        for (int i = 0; i < s; i++){
                a[i] = rand() % 9000 + 1000;
        }
        return a;
}

//function to print an array
void viewArray(int * a, int s){
        for (int i = 0; i < s; i++){
                if (i % 10 == 0 && i > 0) cout << endl;
                cout << a[i] << " ";
        }
        cout << endl;
}

//Cocktail Sort function to sort array
void cocktailSortSwCt(int * a, int s){
        int swaps = 1;
        int temp;
        while (swaps > 0){
                swaps = 0;
                for (int i = 0; i < s - 1; i++){
                        if (a[i] > a[i + 1]){
                                temp = a[i + 1];
                                a[i + 1] = a[i];
                                a[i] = temp;
                                swaps++;
                        }
                }
                if (swaps = 0) return;
                swaps = 0;
                for (int i = s - 1; i > -1; i--){
                        if (a[i] < a[i - 1]){
                                temp = a[i - 1];
                                a[i - 1] = a[i];
                                a[i] = temp;
                                swaps++;
                        }
                }
        }
        return;
}
admiral% make -f bjh1b.mak
g++ -c bjh1b.cpp
g++ -o bjh1b bjh1b.o
admiral% bjh1b
1008 1029 1088 1137 1149 1249 1305 1549 1556 1568 
1587 1594 1602 1642 1648 1820 1880 1882 1973 1981 
2034 2037 2044 2156 2276 2365 2506 2546 2657 2837 
2870 2899 2900 2912 2943 3063 3404 3418 3438 3511 
3674 3816 3968 3991 4119 4169 4242 4245 4355 4411 
4431 4590 4668 4729 4784 4819 4948 5039 5101 5109 
5135 5279 5424 5443 5531 5562 5738 5930 6096 6160 
6165 6319 6385 6471 6518 6629 6633 7110 7160 7682 
7836 7839 7984 8048 8093 8243 8519 8628 8674 8726 
8848 8885 8980 8986 9454 9787 9812 9834 9898 9931 

Search Value: 2365
Linear Search: 25 (2365)
Binary Search: 25 (2365)

Linear Search:
500:  5.1e-06
1000: 1.112e-05
2500: 2.844e-05
5000: 5.886e-05

Binary Search:
500:  5e-07
1000: 6e-07
2500: 6.6e-07
5000: 7e-07
admiral% ^D
script done on Sun Sep 27 17:29:53 2015
