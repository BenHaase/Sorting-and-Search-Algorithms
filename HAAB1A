Script started on Sun Sep 27 17:08:40 2015
admiral% cat bjh1a.cpp
// Ben Haase
// 9/27/15
// CS3130 part A
// implementation of sorting algorithms on array of 100 random ints
// run time of sorting algorithms

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <time.h>

using namespace std;

void bubbleSortSwCt(int *, int);
void cocktailSortSwCt(int *, int);
void shellSort1(int *, int);
void shellSort2(int *, int);
int * randomArrGen(int);
void viewArray(int *, int);
int * copyArray(int *, int s);
void resetArr(int ***, int ***, int *);
void run100();
void avgRunTime();
int main(int argc, char * argv[])
{
        srand(time(NULL));
        run100();
        avgRunTime();

        return 0;
}

//Bubble Sort with swaps counting
void bubbleSortSwCt(int * a, int s){
        int swaps = 1;
        int temp;
        while (swaps > 0){
                swaps = 0;
                for (int i = 0; i < s - 1; i++){
                        if (a[i] > a[i + 1]){
                                temp = a[i + 1];
                                a[i + 1] = a[i];
                                a[i] = temp;
                                swaps++;
                        }
                }
        }
        return;
}

//Cocktail Sort with swaps counting
void cocktailSortSwCt(int * a, int s){
        int swaps = 1;
        int temp;
        while (swaps > 0){
                swaps = 0;
                for (int i = 0; i < s - 1; i++){
                        if (a[i] > a[i + 1]){
                                temp = a[i + 1];
                                a[i + 1] = a[i];
                                a[i] = temp;
                                swaps++;
                        }
                }
                if (swaps = 0) return;
                swaps = 0;
                for (int i = s - 1; i > -1; i--){
                        if (a[i] < a[i - 1]){
                                temp = a[i - 1];
                                a[i - 1] = a[i];
                                a[i] = temp;
                                swaps++;
                        }
                }
        }
        return;
}

// Shell Sort using gap starting at n/2 and dividing gap by 2 each iteration
void shellSort1(int * a, int s){
        int temp;
        int gap = s;
        int k;
        do{
                gap /= 2;
                for (int i = 0; i<(s / gap); i++){
                        for (int j = i; j<s; j += gap){
                                k = j;
                                temp = a[k];
                                while (temp < a[k - gap] && k - gap > -1){
                                        a[k] = a[k - gap];
                                        k -= gap;
                                }
                                a[k] = temp;
                        }
                }
        } while (gap > 1);
}

// Shell Sort using gap starting at n/2.2 and dividing gap by 2.2 each iteration adding one if gap is even
void shellSort2(int * a, int s){
        int temp;
        int gap = s;
        int k;
        do{
                gap /= 2.2;
                if (gap % 2 == 0) gap++;
                for (int i = 0; i<(s / gap); i++){
                        for (int j = i; j<s; j += gap){
                                k = j;
                                temp = a[k];
                                while (temp < a[k - gap] && k - gap > -1){
                                        a[k] = a[k - gap];
                                        k -= gap;
                                }
                                a[k] = temp;
                        }
                }
        } while (gap > 1);
}

//function to generate an array of random numbers
int * randomArrGen(int s){
        int * a = new int[s];
        for (int i = 0; i < s; i++){
                a[i] = rand() % 9000 + 1000;
        }
        return a;
}

//function to print an array
void viewArray(int * a, int s){
        for (int i = 0; i < s; i++){
                if (i % 10 == 0 && i>0) cout << endl;
                cout << a[i] << " ";
        }
        cout << endl << endl;
}

//function to copy an array
int * copyArray(int * a, int s){
        int * b = new int[s];
        for (int i = 0; i < s; i++) b[i] = a[i];
        return b;
}

//function to reset sorted array to original unsorted array
void resetArr(int *** a, int *** b, int * s){
        for (int i = 0; i < 4; i++){
                for (int j = 0; j < 10; j++){
                        delete[] b[i][j];
                        b[i][j] = copyArray(a[i][j], s[i]);
                }
        }
}

//function to run each sorting algorithm for an array of 100 random ints
void run100(){
        int s = 100;
        int * a = randomArrGen(s);
        int * bubble = copyArray(a, s);
        int * cocktail = copyArray(a, s);
        int * shell1 = copyArray(a, s);
        int * shell2 = copyArray(a, s);
        bubbleSortSwCt(bubble, s);
        cocktailSortSwCt(cocktail, s);
        shellSort1(shell1, s);
        shellSort2(shell2, s);
        cout << "Bubble Sort" << endl;
        viewArray(a, s);
        viewArray(bubble, s);
        cout << endl << "Cocktail Sort" << endl;
        viewArray(a, s);
        viewArray(cocktail, s);
        cout << endl << "Shell Sort n/2" << endl;
        viewArray(a, s);
        viewArray(shell1, s);
        cout << endl << "Shell Sort n/2.2 odd" << endl;
        viewArray(a, s);
        viewArray(shell2, s);
}

//function to measure the runtime of sorting algorithms for various input sizes
void avgRunTime(){
        clock_t start;
        clock_t end;
        double elapsed;
        int s[] = { 500, 1000, 2500, 5000 };
        int ** a[4];
        int ** b[4];
        double * at[4];
        for (int i = 0; i < 4; i++){
                a[i] = new int *[10];
                b[i] = new int *[10];
                at[i] = new double[4];
                for (int k = 0; k < 4; k++) at[i][k] = 0;
                for (int j = 0; j < 10; j++){
                        a[i][j] = randomArrGen(s[i]);
                        b[i][j] = copyArray(a[i][j], s[i]);
                }
        }

        for (int j = 0; j < 4; j++){
                for (int k = 0; k < 10; k++){
                        start = clock();
                        bubbleSortSwCt(b[j][k], s[j]);
                        end = clock();
                        elapsed = double(end - start) / CLOCKS_PER_SEC;
                        at[0][j] = at[0][j] + elapsed;
                }
                at[0][j] = at[0][j] / 10;
        }
        resetArr(a, b, s);
        for (int j = 0; j < 4; j++){
                for (int k = 0; k < 10; k++){
                        start = clock();
                        cocktailSortSwCt(b[j][k], s[j]);
                        end = clock();
                        elapsed = double(end - start) / CLOCKS_PER_SEC;
                        at[1][j] = at[1][j] + elapsed;
                }
                at[1][j] = at[1][j] / 10;
        }
        resetArr(a, b, s);
        for (int j = 0; j < 4; j++){
                for (int k = 0; k < 10; k++){
                        start = clock();
                        shellSort1(b[j][k], s[j]);
                        end = clock();
                        elapsed = double(end - start) / CLOCKS_PER_SEC;
                        at[2][j] = at[2][j] + elapsed;
                }
                at[2][j] = at[2][j] / 10;
        }
        resetArr(a, b, s);
        for (int j = 0; j < 4; j++){
                for (int k = 0; k < 10; k++){
                        start = clock();
                        shellSort2(b[j][k], s[j]);
                        end = clock();
                        elapsed = double(end - start) / CLOCKS_PER_SEC;
                        at[3][j] = at[3][j] + elapsed;
                }
                at[3][j] = at[3][j] / 10;
        }
        for (int i = 0; i < 4; i++){
                if (i == 0) cout << "Bubble" << endl;
                if (i == 1) cout << endl << "Cocktail" << endl;
                if (i == 2) cout << endl << "Shell n/2" << endl;
                if (i == 3) cout << endl << "Shell n/2.2 odd" << endl;
                for (int j = 0; j < 4; j++){
                        cout << s[j];
                        if (s[j] == 500) cout << " ";
                        cout << ": " << at[i][j] << endl;
                }
        }
}

admiral% make -f bjh1a.mak
g++ -c bjh1a.cpp
bjh1a.cpp: In function `void shellSort2(int*, int)':
bjh1a.cpp:106: warning: converting to `int' from `double'
g++ -o bjh1a bjh1a.o
admiral% bjh1a
Bubble Sort
3096 6160 3447 8299 5205 3024 4575 3934 5462 1222 
6757 7249 1506 2961 9880 6061 6939 5262 3420 8224 
1474 9384 6307 7775 2960 1581 5501 3616 2861 8566 
1336 2725 9577 4014 6985 8887 7619 8968 4734 1184 
4581 3046 2945 2215 4140 1790 4380 3073 3208 1715 
7412 8892 4208 9491 2848 7972 7674 3598 2054 2553 
2029 2849 4882 8782 6615 7318 4918 5147 6478 4284 
2175 5093 9663 5478 5845 3738 4608 5725 9889 8735 
1302 3043 5796 4453 6941 3278 2611 1167 3947 3713 
8908 8461 9947 5906 3151 7469 9539 2110 6789 6958 

1167 1184 1222 1302 1336 1474 1506 1581 1715 1790 
2029 2054 2110 2175 2215 2553 2611 2725 2848 2849 
2861 2945 2960 2961 3024 3043 3046 3073 3096 3151 
3208 3278 3420 3447 3598 3616 3713 3738 3934 3947 
4014 4140 4208 4284 4380 4453 4575 4581 4608 4734 
4882 4918 5093 5147 5205 5262 5462 5478 5501 5725 
5796 5845 5906 6061 6160 6307 6478 6615 6757 6789 
6939 6941 6958 6985 7249 7318 7412 7469 7619 7674 
7775 7972 8224 8299 8461 8566 8735 8782 8887 8892 
8908 8968 9384 9491 9539 9577 9663 9880 9889 9947 


Cocktail Sort
3096 6160 3447 8299 5205 3024 4575 3934 5462 1222 
6757 7249 1506 2961 9880 6061 6939 5262 3420 8224 
1474 9384 6307 7775 2960 1581 5501 3616 2861 8566 
1336 2725 9577 4014 6985 8887 7619 8968 4734 1184 
4581 3046 2945 2215 4140 1790 4380 3073 3208 1715 
7412 8892 4208 9491 2848 7972 7674 3598 2054 2553 
2029 2849 4882 8782 6615 7318 4918 5147 6478 4284 
2175 5093 9663 5478 5845 3738 4608 5725 9889 8735 
1302 3043 5796 4453 6941 3278 2611 1167 3947 3713 
8908 8461 9947 5906 3151 7469 9539 2110 6789 6958 

1167 1184 1222 1302 1336 1474 1506 1581 1715 1790 
2029 2054 2110 2175 2215 2553 2611 2725 2848 2849 
2861 2945 2960 2961 3024 3043 3046 3073 3096 3151 
3208 3278 3420 3447 3598 3616 3713 3738 3934 3947 
4014 4140 4208 4284 4380 4453 4575 4581 4608 4734 
4882 4918 5093 5147 5205 5262 5462 5478 5501 5725 
5796 5845 5906 6061 6160 6307 6478 6615 6757 6789 
6939 6941 6958 6985 7249 7318 7412 7469 7619 7674 
7775 7972 8224 8299 8461 8566 8735 8782 8887 8892 
8908 8968 9384 9491 9539 9577 9663 9880 9889 9947 


Shell Sort n/2
3096 6160 3447 8299 5205 3024 4575 3934 5462 1222 
6757 7249 1506 2961 9880 6061 6939 5262 3420 8224 
1474 9384 6307 7775 2960 1581 5501 3616 2861 8566 
1336 2725 9577 4014 6985 8887 7619 8968 4734 1184 
4581 3046 2945 2215 4140 1790 4380 3073 3208 1715 
7412 8892 4208 9491 2848 7972 7674 3598 2054 2553 
2029 2849 4882 8782 6615 7318 4918 5147 6478 4284 
2175 5093 9663 5478 5845 3738 4608 5725 9889 8735 
1302 3043 5796 4453 6941 3278 2611 1167 3947 3713 
8908 8461 9947 5906 3151 7469 9539 2110 6789 6958 

1167 1184 1222 1302 1336 1474 1506 1581 1715 1790 
2029 2054 2110 2175 2215 2553 2611 2725 2848 2849 
2861 2945 2960 2961 3024 3043 3046 3073 3096 3151 
3208 3278 3420 3447 3598 3616 3713 3738 3934 3947 
4014 4140 4208 4284 4380 4453 4575 4581 4608 4734 
4882 4918 5093 5147 5205 5262 5462 5478 5501 5725 
5796 5845 5906 6061 6160 6307 6478 6615 6757 6789 
6939 6941 6958 6985 7249 7318 7412 7469 7619 7674 
7775 7972 8224 8299 8461 8566 8735 8782 8887 8892 
8908 8968 9384 9491 9539 9577 9663 9880 9889 9947 


Shell Sort n/2.2 odd
3096 6160 3447 8299 5205 3024 4575 3934 5462 1222 
6757 7249 1506 2961 9880 6061 6939 5262 3420 8224 
1474 9384 6307 7775 2960 1581 5501 3616 2861 8566 
1336 2725 9577 4014 6985 8887 7619 8968 4734 1184 
4581 3046 2945 2215 4140 1790 4380 3073 3208 1715 
7412 8892 4208 9491 2848 7972 7674 3598 2054 2553 
2029 2849 4882 8782 6615 7318 4918 5147 6478 4284 
2175 5093 9663 5478 5845 3738 4608 5725 9889 8735 
1302 3043 5796 4453 6941 3278 2611 1167 3947 3713 
8908 8461 9947 5906 3151 7469 9539 2110 6789 6958 

1167 1184 1222 1302 1336 1474 1506 1581 1715 1790 
2029 2054 2110 2175 2215 2553 2611 2725 2848 2849 
2861 2945 2960 2961 3024 3043 3046 3073 3096 3151 
3208 3278 3420 3447 3598 3616 3713 3738 3934 3947 
4014 4140 4208 4284 4380 4453 4575 4581 4608 4734 
4882 4918 5093 5147 5205 5262 5462 5478 5501 5725 
5796 5845 5906 6061 6160 6307 6478 6615 6757 6789 
6939 6941 6958 6985 7249 7318 7412 7469 7619 7674 
7775 7972 8224 8299 8461 8566 8735 8782 8887 8892 
8908 8968 9384 9491 9539 9577 9663 9880 9889 9947 

Bubble
500 : 0.01
1000: 0.037
2500: 0.237
5000: 0.954

Cocktail
500 : 0.006
1000: 0.024
2500: 0.15
5000: 0.6

Shell n/2
500 : 0.006
1000: 0.023
2500: 0.18
5000: 0.719

Shell n/2.2 odd
500 : 0.006
1000: 0.024
2500: 0.151
5000: 0.607
admiral% ^D
script done on Sun Sep 27 17:10:51 2015
